/**
 * Les Ourses à plumes
 * Javascript Loader
 * No dependency
 * ver. 0.0.5
 */

/* ------------------------------------------------------------------ */
/* # Public Variables */
/* ------------------------------------------------------------------ */

/* Utility */
$build_container  = true;                               // Boolean  Generate container elements (i.e. sidebar, header, footer). Default = true
$build_compress   = false;                              // Boolean  Compress generated content (i.e. remove tabs and line ends). Default = false
$dev_toolbar      = true;                               // Boolean  Create dev toolbar. Default = false
$css_fx           = true;                               // Boolean  Enable CSS effects. Default = true
$lib_ext          = "";                                 // String   JS libraries additional extension. Default = ".min"
$null_link        = "javascript:void(0)";               // String   Set null link value. Default = "javascript:void(0)"

/* Whois */
$org_url          = "http://www.ourses-plumes.org/";    // String   Set organization URL.
$org_name         = "Les Ourses &agrave; plumes";       // String   Set organization name.
$app_name         = "Webzine f&eacute;ministe";         // String   Set application name.
$app_ver          = "0.0.5";                            // String   Set application version.
$app_kwd          = ["Webzine", "F&eacute;minisme"];    // Array    Set application keywords.
$app_desc         = "Un webzine f&eacute;ministe.";     // String   Set application keywords.
$app_genr         = null;                               // String   Set application generator (i.e. the software used for dev).

/* Variable d'application */
$oursesAuthcToken = "oursesAuthcToken";                 // String   Key of the authentication token
$oursesUserPseudo = "oursesUserPseudo";                 // String   Key of the User pseudo
$oursesUserRole   = "oursesUserRole";                   // String   Key of the User role
$oursesAccountId  = "oursesAccountId";                  // String   Key of the User account id
$oursesProfileId  = "oursesProfileId";                  // String   Key of the User account id
$redir_param      = "?redirection=";                    // String   url param in the login page. use for the redirection
$role_admin       = "Administratrice"                   // String   Admin role
$role_redac       = "Rédactrice"                        // String   Redacter role

$err_msg          = {                                   // Object   Define generic error messages.
	"err_default" : "Une erreur technique s’est produite. Veuillez prévenir l’administateur du site.",
	"form_invalid" : "Le formulaire que vous avez soumis est invalide et n’a pas pu être envoyé.",
	"form_incomplete" : "Le formulaire que vous avez soumis est incomplet et n’a pas été envoyé.",
	"something_weird_happened" : "Un truc vraiment chelou s’est produit. Veuillez éteindre votre ordinateur et faire le poirier en attendant les secours."
}

/* navigation map */
$login_page       = "/connexion";                       // String   url of the login page
$accounts_page    = "/comptes";                         // String   url of the accounts page
$bug_tracker_page = "/bug-tracker";                     // String   url of the bug tracker page
$home_page        = "/";                                // String   url of the home page
$my_account_page  = "/parametres/compte";               // String   url of my account page
$my_profile_page  = "/parametres/profil";               // String   url of my profile page
//$new_article      = "/articles/nouveau";                // String   url of a new article
$new_article      = "editor.html";                // String   url of a new article

$app_root         = "/";                                // String   Set application base URL. Default = "/"
$js_root          = $app_root + "js/";                  // String   Set js root. Default = "/js/"

/* UNUSED for now */
/*
$app_path         = {                                   // Object   Set application path to files.
	root: "/",
	js: "js/",
	css: "css/",
	img: "img/",
	fnt: "fnt/",
	tmpl: "tmpl/",
	json: "json/"
};
*/

/* TEMP : debug / dev constants */
$boot             = true;                               // Boolean  Flag for this file setup.
$free_log         = true;                               // Boolean  Disable abide validation for logger.
$user_picture     = "usr-nadejda.jpg";                  // String   Register user picture file.
$page_title       = null;                               // String   Register page title.

/* ------------------------------------------------------------------ */
/* # TEMP : Frontend Reloc path */
/* ------------------------------------------------------------------ */

function isFileProtocol() {
	if (window.location.href.split("/")[0].slice(0,4) === "file") {
		return true;
	}
}

function isLocalHost() {
	if (window.location.hostname === "localhost") {
		return true;
	}
}

if (isFileProtocol()) {
	$app_root = ""; // Set relative base URL while serverless
	$js_root = $app_root + "js/"; // Redefine js files location while serverless
}

/* ------------------------------------------------------------------ */
/* # Private Variables */
/* ------------------------------------------------------------------ */

var IE_conditional_comments = [
	lb() + tb(3) + "<style type='text/css'>.gradient{filter:none;}</style>",
	lb() + tb(3) + "<style type='text/css'>.gradient{filter:none;}</style>"
];

var head_tags = [
	{elem: "meta", attr: {name: "viewport", content: "width=device-width, initial-scale=1.0"}},
	{elem: "meta", attr: {name: "author", content: $org_name}},
	{elem: "meta", attr: {name: "application-name", content: $app_name}},
	{elem: "meta", attr: {name: "keywords", content: $app_kwd.toString()}},
	{elem: "meta", attr: {name: "description", content: $app_desc}},
	{elem: "meta", attr: {name: "generator", content: $app_genr}},
	{elem: "link", attr: {href: $app_root + "img/ico/loap-icon-64x64.png", rel: "icon", type: "image/x-icon"}},
	//{elem: "link", attr: {href: $app_root + "css/normalize.css", rel: "stylesheet"}}, // UNUSED
	{elem: "link", attr: {href: $app_root + "css/foundation.css", rel: "stylesheet"}},
	{elem: "link", attr: {href: $app_root + "css/loap-main.css", rel: "stylesheet"}},
	{elem: "link", attr: {href: $app_root + "css/loap-icons.css", rel: "stylesheet"}},
	{elem: "link", attr: {href: $app_root + "css/loap-fx.css", rel: "stylesheet"}},
	{elem: "script", attr: {src: $app_root + "js/modernizr/modernizr" + $lib_ext +".js"}},
	{elem: "script", attr: {src: $app_root + "js/jquery/jquery-2.x" + $lib_ext + ".js"}},
	{elem: "script", attr: {src: $app_root + "js/jquery/jquery.autosize" + $lib_ext + ".js"}},
	//{elem: "script", attr: {src: $app_root + "js/jquery/jquery.customSelect" + $lib_ext + ".js"}}, // UNUSED
	{elem: "script", attr: {src: $app_root + "js/dot/dot" + $lib_ext + ".js"}},
	{elem: "script", attr: {src: $app_root + "js/dot/dot.settings.js"}},
	{elem: "!--[lt IE 9]", text: IE_conditional_comments[1] + lb() + tb(2) + "<![endif]-->"},
	{elem: "!--[gt IE 9]", text: IE_conditional_comments[2] + lb() + tb(2) + "<![endif]-->"}
];

var body_tags = [
	{elem: "script", attr: {src: $app_root + "js/loap.js"}},
	{elem: "script", attr: {src: $app_root + "js/foundation/foundation.lib.js"}}
];

var xhr = (function() {
	if (typeof XMLHttpRequest !== "undefined") {
		if (isFileProtocol() && navigator.appName == "Microsoft Internet Explorer") {
			return new ActiveXObject("Microsoft.XMLHTTP") // Internet Explorer > 9 from local files
		} else {
			return new XMLHttpRequest(); // Firefox, Chrome, Opera
		}
	} else if (typeof ActiveXObject !== "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP"); // Internet Explorer < 9
	} else {
		console.log("File loading failed. XMLHttpRequest and ActiveXObject deactivated or not supported.");
	}
}());

/* ------------------------------------------------------------------ */
/* # Methods Declaration */
/* ------------------------------------------------------------------ */

/*
 * NOTE
 * Below is a simple file request.
 * The function has been named accordingly to doT.js
 */

function loadfile(file, async, method, send, response) {
var async = async || false, method = method || "GET", send = send || null, response = response || "text"; // default params
	if (typeof xhr !== "undefined") {
		xhr.open(method, file, async); // define request arguments
		xhr.setRequestHeader("Content-Type", "text/plain;charset=UTF-8"); // set request MIME type
		if (navigator.appName != "Microsoft Internet Explorer") { // request plain text for any browser except IE
			xhr.overrideMimeType("text/plain"); // prevent request header bugs
		}
		try {
			xhr.send(send); // send request to server
		} catch(err) {
			console.log(file + " not found.\n " + err); // log server error
		}
		if (response == "xml") {
			return xhr.responseXML; // return XML response from server
		} else {
			return xhr.responseText; // return Plain Text response from server
		}
	} else {
		console.log(file + " loading failed. XMLHttpRequest not supported."); // log client error
	}
}

function p_char(n, c) { // Print Character (n.b. for local use only)
	var s = "";
	if ($build_compress == false) {
		for (var i = 0; i < n; i++) {
			s += c;
		}
	}
	return s;
}

function tb(n, c) { // Tabulation (alias)
	var n = n || 1, c = c || "\t"; // default params
	return p_char(n, c);
}

function lb(n, c) { // Line Break (alias)
	var n = n || 1, c = c || "\n"; // default params
	return p_char(n, c);
}

function mk_tags(array) { // Make Tags
	var str = "";
	for (index in array) {
		str += lb() + tb(2) + "<" + array[index].elem;
		for (param in array[index].attr) {
			if (array[index].attr[param] != null) {
				str += " " + param + "='" + array[index].attr[param] + "'";
			}
		}
		str += ">";
		if (typeof array[index].text !== "undefined") {
			str += array[index].text;
		}
		if (array[index].elem == "script") {
			str += "</script>";
		}
	}
	return str;
}

function load(script) { // Postbuild Processing
	if (typeof script !== "undefined") {
		body_tags.splice(-1, 0, {elem: "script", attr: {src: $js_root + script}});
	}
	document.write(mk_tags(body_tags));
}

/* A appeler en https pour ne pas transporter le token en clair */
function isAuthenticated(){
	if (typeof xhr !== "undefined") {
		var redirection = window.location.pathname;
		xhr.open("GET", "/rest/authc/connected", false); // define request arguments
		xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8"); // set request MIME type
		xhr.setRequestHeader("Authorization", window.localStorage.getItem($oursesAuthcToken)); // set authc token
		try {
			xhr.send(null); // send request to server
			if (xhr.status == 401){
				console.log("unautorized - redirection to the login page"); // unauthorized
				var loginParam = $redir_param + redirection;
				window.location.href = $login_page + loginParam;
			}
		} catch(err) {
			console.log("resource not found.\n " + err); // log server error
		}
	} else {
		console.log(file + " loading failed. XMLHttpRequest not supported."); // log client error
	}
}

function isAdministratrice(){
	if (typeof xhr !== "undefined") {
		var redirection = window.location.pathname;
		xhr.open("GET", "/rest/authz/isadmin", false); // define request arguments
		xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8"); // set request MIME type
		xhr.setRequestHeader("Authorization", window.localStorage.getItem($oursesAuthcToken)); // set authc token
		try {
			xhr.send(null); // send request to server
			if (xhr.status == 401){
				console.log("unautorized - redirection to the login page"); // unauthorized
				var loginParam = $redir_param + redirection;
				window.location.href = $login_page + loginParam;
			}
			else if (xhr.status == 403){
				console.log("forbidden - redirection to the login page"); // unauthorized
				window.location.href = $home_page;
			}
		} catch(err) {
			console.log("resource not found.\n " + err); // log server error
		}
	} else {
		console.log(file + " loading failed. XMLHttpRequest not supported."); // log client error
	}
}

/* ------------------------------------------------------------------ */
/* # Prebuild Processing */
/* ------------------------------------------------------------------ */
document.write(mk_tags(head_tags));
