/**
 * Les Ourses à plumes
 * Javascript Loader
 * No dependency
 * ver. 0.0.3
 */

/* ------------------------------------------------------------------ */
/* # Public Variables */
/* ------------------------------------------------------------------ */

/* Utility */
$build_compress   = false;                              // Boolean. Compress generated content (i.e. remove tabs and line ends). Default = false
$dev_toolbar      = true;                               // Boolean. Create dev toolbar. Default = false
$css_fx           = true;                               // Boolean. Enable CSS effects. Default = true
$lib_ext          = ".min";                             // String.  JS libraries additional extension. Default = ".min"
$null_link        = "javascript:void(0)";               // String.  Set null link value. Default = "javascript:void(0)"

/* Whois */
$org_name         = "Les Ourses &agrave; plumes";       // String.  Set organization name.
$app_name         = "Webzine f&eacute;ministe";         // String.  Set application name.
$app_ver          = "0.0.3";                            // String.  Set application version.
$app_kwd          = ["Webzine", "F&eacute;minisme"];    // Array.   Set application keywords.
$app_desc         = "Un webzine f&eacute;ministe.";     // String.  Set application keywords.
$app_genr         = null;                               // String.  Set application generator (i.e. the software used for dev).

$app_root         = "/";                                // String.  Set application base URL. Default = "/"

/* UNUSED for now */
/*
$app_path = { // Object.  Set application path to files.
	js: "js/",
	css: "css/",
	img: "img/",
	fnt: "fnt/",
	tmpl: "tmpl/",
	json: "json/"
};
*/

/* TEMP */
$boot             = true;                               // Boolean. Flag for this file setup.
$free_log         = true;                               // Boolean. Disable abide validation for logger.
$user_name        = "Nadejda";                          // String.  Register user name (short).
$user_picture     = "usr-nadejda.jpg";                  // String.  Register user picture file.
$page_title       = null;                               // String.  Register page title.

$err_msg          = {                                   // Object.  Define generic error messages.
	default: "Une erreur technique s’est produite. Veuillez prévenir l’administateur du site.",
	form_invalid: "Le formulaire que vous avez soumis est invalide et n’a pas pu être envoyé.",
	form_incomplete: "Le formulaire que vous avez soumis est incomplet et n’a pas été envoyé.",
	something_weird_happened: "Un truc vraiment chelou s’est produit. Veuillez éteindre votre ordinateur et faire le poirier en attendant les secours."
}


/* ------------------------------------------------------------------ */
/* # Reloc path */
/* ------------------------------------------------------------------ */

if (window.location.href.split("/")[0].slice(0,4) == "file") {
	$app_root = ""; // Set relative base URL while serverless
}

/* ------------------------------------------------------------------ */
/* # Private Variables */
/* ------------------------------------------------------------------ */

/**
doT.templateSettings = {
	evaluate: regexp,      // parse a string as a javascript instruction WITHOUT appending it to the result function (mostly used for statements)
	interpolate: regexp,   // parse a string as a javascript instruction and append it to the result function (n.b. this is default behaviour)
	encode: regexp,        // replace illegal characters by html numeric entities
	use: regexp,           // call partial template
	define: regexp,        // set partial template
	conditional: regexp,   // execute 'if-else if-else' structure
	iterate: regexp,       // loop an array
	varname: string,       // define the name of result function argument (i.e. the variable used for templating)
	strip: boolean,        // erase whitespaces in result output (including tabulations and line breaks -- minify/compress)
	append: boolean,       // define concatenated output result in a single line variable (i.e. use '+' operand instead of '+=' operand for 'out' var)
	selfcontained: boolean // include 'encodeHTML' function in result function (i.e. result function should not depend on doT.js that way)
};
*/

var doT_custom_settings =
	lb() + tb(3) + "doT.templateSettings.varname = 'data';" +
	lb() + tb(3) + "doT.templateSettings.strip = false;" +
	lb() + tb(2);

var IE_conditional_comments = [
	lb() + tb(3) + "<html data-msie='true'>",
	lb() + tb(3) + "<style type='text/css'>.gradient{filter:none;}</style>",
	lb() + tb(3) + "<style type='text/css'>.gradient{filter:none;}</style>"
];

var head_tags = [
	{elem: "meta", attr: {name: "viewport", content: "width=device-width, initial-scale=1.0"}},
	{elem: "meta", attr: {name: "author", content: $org_name}},
	{elem: "meta", attr: {name: "application-name", content: $app_name}},
	{elem: "meta", attr: {name: "keywords", content: $app_kwd.toString()}},
	{elem: "meta", attr: {name: "description", content: $app_desc}},
	{elem: "meta", attr: {name: "generator", content: $app_genr}},
	{elem: "link", attr: {href: $app_root + "img/ico/loap-icon-64x64.png", rel: "icon", type: "image/x-icon"}},
	{elem: "link", attr: {href: $app_root + "css/normalize.css", rel: "stylesheet"}},
	{elem: "link", attr: {href: $app_root + "css/foundation.css", rel: "stylesheet"}},
	{elem: "link", attr: {href: $app_root + "css/loap.css", rel: "stylesheet"}},
	{elem: "script", attr: {src: $app_root + "js/modernizr/modernizr" + $lib_ext +".js"}},
	{elem: "script", attr: {src: $app_root + "js/jquery/jquery" + $lib_ext + ".js"}},
	{elem: "script", attr: {src: $app_root + "js/dot/dot" + $lib_ext + ".js"}},
	{elem: "script", text: doT_custom_settings},
	{elem: "!--[IE]", text: IE_conditional_comments[0] + lb() + tb(2) + "<![endif]-->"},
	{elem: "!--[lt IE 9]", text: IE_conditional_comments[1] + lb() + tb(2) + "<![endif]-->"},
	{elem: "!--[gt IE 9]", text: IE_conditional_comments[2] + lb() + tb(2) + "<![endif]-->"}
];

var body_tags = [
	{elem: "script", attr: {src: $app_root + "js/loap.js"}},
	{elem: "script", attr: {src: $app_root + "js/foundation/foundation.lib.js"}}
];

var xhr = (function() {
	if (typeof XMLHttpRequest !== "undefined") {
		return new XMLHttpRequest();// IE7+, Firefox, Chrome, Opera, Safari
	} else if (typeof ActiveXObject !== "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP"); // IE5, IE6
	} else {
		return;
	}
}());

/* ------------------------------------------------------------------ */
/* # Methods Declaration */
/* ------------------------------------------------------------------ */

/*
 * NOTE
 * Below is a simple file request.
 * The function has been named accordingly to doT.js
 */

function loadfile(file, async, method, send, response) {

//default param
// var method = (typeof method === "undefined") ? "GET" : method;
// var send = (typeof send === "undefined") ? null : send;
// var response = (typeof response === "undefined") ? "text" : response;
// var async = (typeof async === "undefined") ? false : async;

// shorthanded default function arguments * TEST
var async = async || false, method = method || "GET", send = send || null, response = response || "text";

	if (typeof xhr !== "undefined") {
		xhr.open(method, file, async); // define request arguments
		xhr.setRequestHeader("Content-Type", "text/plain;charset=UTF-8"); // set request MIME type * USELESS

		/* UNUSED for now -- TO BE EDIT LATER */
		/*
		if (document.getElementsByTagName("html").hasAttributes("data-msie")) {
			alert("Warning ! This is Internet Explorer !"); // TEMP
		} else {
			xhr.overrideMimeType("text/plain"); // override response MIME type
		}
		*/
		xhr.overrideMimeType("text/plain"); // BUG : don't work in IE !!!

		xhr.send(send); // send request to server
		if (response == "xml") {
			return xhr.responseXML; // return XML response from server
		} else {
			return xhr.responseText; // return Plain Text response from server
		}
	} else {
		console.log(file + " loading failed. XMLHttpRequest not supported.");
	}
}

function p_char(n, c) { // Print Character (n.b. for local use only)
	var s = "";
	if ($build_compress == false) {
		for (var i = 0; i < n; i++) {
			s += c;
		}
	}
	return s;
}

function tb(n, c) { // Tabulation (alias)

//default param
// n = (typeof n === "undefined") ? 1 : n;
// c = (typeof c === "undefined") ? "\t" : c;

// shorthanded default function arguments * TEST
	var n = n || 1, c = c || "\t";
	return p_char(n, c);
}

function lb(n, c) { // Line Break (alias)

//default param
// n = (typeof n === "undefined") ? 1 : n;
// c = (typeof c === "undefined") ? "\t" : c;

// shorthanded default function arguments * TEST
	var n = n || 1, c = c || "\n";
	return p_char(n, c);
}

function mk_tags(array) { // Make Tags
	var str = "";
	for (index in array) {
		str += lb() + tb(2) + "<" + array[index].elem;
		for (param in array[index].attr) {
			if (array[index].attr[param] != null) {
				str += " " + param + "='" + array[index].attr[param] + "'";
			}
		}
		str += ">";
		if (typeof array[index].text !== "undefined") {
			str += array[index].text;
		}
		if (array[index].elem == "script") {
			str += "</script>";
		}
	}
	return str;
}

// var loap = (function() {
	// return {
		// load: function(script) {
			// var script = script || "";
			// if (typeof script !== "undefined") {
				// body_tags.splice(-1, 0,{elem: "script", attr: {src: $app_root + "js/" + script}});
			// }
			// document.write(mk_tags(body_tags));
		// }
	// };
// }());

function load(script) { // Postbuild Processing
	if (typeof script !== "undefined") {
		body_tags.splice(-1, 0, {elem: "script", attr: {src: $app_root + "js/" + script}});
	}
	document.write(mk_tags(body_tags));
}

/* ------------------------------------------------------------------ */
/* # Prebuild Processing */
/* ------------------------------------------------------------------ */
document.write(mk_tags(head_tags));
