/**
 * Les Ourses à plumes
 * Javascript Boot
 * Require Javascript
 * ver. 0.0.2
 */

/* ------------------------------------------------------------------ */
/* # Public Variables */
/* ------------------------------------------------------------------ */

/* Utility */
$build_compress   = false;                              // Boolean. Compress generated content (i.e. remove tabs and line ends). Default = false
$dev_toolbar      = true;                               // Boolean. Create dev toolbar. Default = false
$css_fx           = true;                               // Boolean. Enable CSS effects. Default = true
$lib_ext          = ".min";                             // String.  JS libraries additional extension. Default = ".min"
$null_link        = "javascript:void(0)";               // String.  Set null link value. Default = "javascript:void(0)"

/* Whois */
$org_name         = "Les Ourses &agrave; plumes";       // String.  Set organization name.
$app_name         = "Webzine f&eacute;ministe";         // String.  Set application name.
$app_ver          = "0.0.2";                            // String.  Set application version.
$app_kwd          = ["Webzine", "F&eacute;minisme"];    // Array.   Set application keywords.
$app_desc         = "Un webzine f&eacute;ministe.";     // String.  Set application keywords.
$app_genr         = null;                               // String.  Set application generator (i.e. the software used for dev).
$app_path         = {js_own: "js/", js_lib: "js/"};     // Object.  Set application path to files.

/* TEMP */
$boot             = true;                               // Boolean. Flag for this file setup.
$free_log         = true;                               // Boolean. Disable abide validation for logger.
$user_name        = "Nadejda";                          // String.  Register user name (short).
$user_picture     = "usr-nadejda.jpg";                  // String.  Register user picture file.
$page_title       = null;                               // String.  Register page title.

/* ------------------------------------------------------------------ */
/* # TEMP : Reloc Path for serverless edits */
/* ------------------------------------------------------------------ */

if (window.location.href.split("/")[0].slice(0,4) == "file") {
  $app_path.js_own = "../js/", $app_path.js_lib = "../lib/";
}

/* ------------------------------------------------------------------ */
/* # Private Variables */
/* ------------------------------------------------------------------ */

/**
doT.templateSettings = {
  evaluate: regexp,      // parse a string as a javascript instruction WITHOUT appending it to the result function (mostly used for statements)
  interpolate: regexp,   // parse a string as a javascript instruction and append it to the result function (n.b. this is default behaviour)
  encode: regexp,        // replace illegal characters by html numeric entities
  use: regexp,           // call partial template
  define: regexp,        // set partial template
  conditional: regexp,   // execute 'if-else if-else' structure
  iterate: regexp,       // loop an array
  varname: string,       // define the name of result function argument (i.e. the variable used for templating)
  strip: boolean,        // erase whitespaces in result output (including tabulations and line breaks -- minify/compress)
  append: boolean,       // define concatenated output result in a single line variable (i.e. use '+' operand instead of '+=' operand for 'out' var)
  selfcontained: boolean // include 'encodeHTML' function in result function (i.e. result function should not depend on doT.js that way)
};
*/

var doT_custom_settings =
  lb() + tb(3) + "doT.templateSettings.varname = 'data';" +
  lb() + tb(3) + "doT.templateSettings.strip = false;" +
  lb() + tb(2);

var IE_conditional_comments = [
  lb() + tb(3) + "<script src='//html5shim.googlecode.com/svn/trunk/html5.js'></script>",
  lb() + tb(3) + "<style type='text/css'>.gradient{filter:none;}</style>"
];

var head_tags = [
  {elem: "meta", attr: {name: "viewport", content: "width=device-width, initial-scale=1.0"}},
  {elem: "meta", attr: {name: "author", content: $org_name}},
  {elem: "meta", attr: {name: "application-name", content: $app_name}},
  {elem: "meta", attr: {name: "keywords", content: $app_kwd.toString()}},
  {elem: "meta", attr: {name: "description", content: $app_desc}},
  {elem: "meta", attr: {name: "generator", content: $app_genr}},
  {elem: "link", attr: {href: "img/ico/loap-icon-64x64.png", rel: "icon", type: "image/x-icon"}},
  {elem: "link", attr: {href: "css/normalize.css", rel: "stylesheet"}},
  {elem: "link", attr: {href: "css/foundation.css", rel: "stylesheet"}},
  {elem: "link", attr: {href: "css/loap.css", rel: "stylesheet"}},
  {elem: "script", attr: {src: $app_path.js_lib + "modernizr/modernizr" + $lib_ext +".js"}},
  {elem: "script", attr: {src: $app_path.js_lib + "jquery/jquery" + $lib_ext + ".js"}},
  {elem: "script", attr: {src: $app_path.js_lib + "dot/dot" + $lib_ext + ".js"}},
  {elem: "script", text: doT_custom_settings},
  {elem: "!--[lt IE 9]", text: IE_conditional_comments[0] + lb() + tb(2) + "<![endif]-->"},
  {elem: "!--[gt IE 9]", text: IE_conditional_comments[1] + lb() + tb(2) + "<![endif]-->"}
];

var body_tags = [
  {elem: "script", attr: {src: $app_path.js_own + "loap-build.js"}},
  {elem: "script", attr: {src: $app_path.js_own + "loap-core.js"}},
  {elem: "script", attr: {src: $app_path.js_lib + "foundation/foundation.lib.js"}}
];

var xhr = (function() {
  if (typeof XMLHttpRequest !== "undefined") {
    return new XMLHttpRequest();// IE7+, Firefox, Chrome, Opera, Safari
  } else if (typeof ActiveXObject !== "undefined") {
    return new ActiveXObject("Microsoft.XMLHTTP"); // IE5, IE6
  } else {
    return;
  }
}());

/* ------------------------------------------------------------------ */
/* # Methods Declaration */
/* ------------------------------------------------------------------ */

/*
 * NOTE
 * Below is a simple file request.
 * The function has been named accordingly to doT.js
 */

function loadfile(file, async, method, send, response) {

//default param
method = (typeof method === "undefined") ? "GET" : method;
send = (typeof send === "undefined") ? null : send;
response = (typeof response === "undefined") ? "text" : response;
async = (typeof async === "undefined") ? false : async;

  if (typeof xhr !== "undefined") {
    xhr.open(method, file, async); // define request arguments
    xhr.setRequestHeader("Content-Type", "text/plain;charset=UTF-8"); // set request MIME type
    xhr.overrideMimeType("text/plain"); // override response MIME type
    xhr.send(send); // send request to server
    if (response == "xml") {
      return xhr.responseXML; // return XML response from server
    } else {
      return xhr.responseText; // return Plain Text response from server
    }
  } else {
    console.log(file + " loading failed. XMLHttpRequest not supported.");
  }
}

function p_char(n, c) { // Print Character (n.b. for local use only)
  var s = "";
  if ($build_compress == false) {
    for (var i = 0; i < n; i++) {
      s += c;
    }
  }
  return s;
}

function tb(n, c) { // Tabulation (alias)
	//default param
n = (typeof n === "undefined") ? 1 : n;
c = (typeof c === "undefined") ? "\t" : c;
  return p_char(n, c);
}

function lb(n, c) { // Line Break (alias)
//default param
n = (typeof n === "undefined") ? 1 : n;
c = (typeof c === "undefined") ? "\t" : c;
  return p_char(n, c);
}

function mk_tags(array) { // Make Tags
  var str = "";
  for (index in array) {
    str += lb() + tb(2) + "<" + array[index].elem;
    for (param in array[index].attr) {
      if (array[index].attr[param] != null) {
        str += " " + param + "='" + array[index].attr[param] + "'";
      }
    }
    str += ">";
    if (typeof array[index].text !== "undefined") {
      str += array[index].text;
    }
    if (array[index].elem == "script") {
      str += "</script>";
    }
  }
  return str;
}

function loap() { // Postbuild Processing
  document.write(mk_tags(body_tags));
}

/* ------------------------------------------------------------------ */
/* # Prebuild Processing */
/* ------------------------------------------------------------------ */
document.write(mk_tags(head_tags));
